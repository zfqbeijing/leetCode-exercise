活动表 Activity：

+--------------+---------+
| Column Name  | Type    |
+--------------+---------+
| player_id    | int     |
| device_id    | int     |
| event_date   | date    |
| games_played | int     |
+--------------+---------+
表的主键是 (player_id, event_date)。
这张表展示了一些游戏玩家在游戏平台上的行为活动。
每行数据记录了一名玩家在退出平台之前，当天使用同一台设备登录平台后打开的游戏的数目（可能是 0 个）。
 

写一条 SQL 查询语句获取每位玩家 第一次登陆平台的日期。

查询结果的格式如下所示：

Activity 表：
+-----------+-----------+------------+--------------+
| player_id | device_id | event_date | games_played |
+-----------+-----------+------------+--------------+
| 1         | 2         | 2016-03-01 | 5            |
| 1         | 2         | 2016-05-02 | 6            |
| 2         | 3         | 2017-06-25 | 1            |
| 3         | 1         | 2016-03-02 | 0            |
| 3         | 4         | 2018-07-03 | 5            |
+-----------+-----------+------------+--------------+

Result 表：
+-----------+-------------+
| player_id | first_login |
+-----------+-------------+
| 1         | 2016-03-01  |
| 2         | 2017-06-25  |
| 3         | 2016-03-02  |
+-----------+-------------+

执行用时：
402 ms, 在所有 MySQL 提交中击败了81.67%的用户
内存消耗：0B, 在所有 MySQL 提交中击败了100.00%的用户
SELECT
	player_id,
	MIN(event_date) `first_login`
FROM
	Activity
GROUP BY
	player_id;



请编写一个 SQL 查询，描述每一个玩家首次登陆的设备名称

Result table:
+-----------+-----------+
| player_id | device_id |
+-----------+-----------+
| 1         | 2         |
| 2         | 3         |
| 3         | 1         |
+-----------+-----------+

执行用时：400 ms, 在所有 MySQL 提交中击败了88.89%的用户
内存消耗：0B, 在所有 MySQL 提交中击败了100.00%的用户
SELECT
	a1.player_id,
	a1.device_id
FROM
	Activity a1,
	(SELECT
		player_id,
		MIN(event_date) `first_login`
	FROM
		Activity
	GROUP BY
		player_id
	) a2
WHERE
	a1.player_id = a2.player_id
AND
	a1.event_date = a2.first_login;

执行用时：297 ms, 在所有 MySQL 提交中击败了90.89%的用户
内存消耗：0B, 在所有 MySQL 提交中击败了100.00%的用户
SELECT
	a1.player_id,
	a1.device_id
FROM
	Activity a1
JOIN
	(SELECT
		player_id,
		MIN(event_date) `first_login`
	FROM
		Activity
	GROUP BY
		player_id
	) a2
ON
	a1.player_id = a2.player_id
AND
	a1.event_date = a2.first_login;




编写一个 SQL 查询，同时报告每组玩家和日期，以及玩家到目前为止玩了多少游戏。也就是说，在此日期之前玩家所玩的游戏总数。
详细情况请查看示例。

查询结果格式如下所示：
Result table:
+-----------+------------+---------------------+
| player_id | event_date | games_played_so_far |
+-----------+------------+---------------------+
| 1         | 2016-03-01 | 5                   |
| 1         | 2016-05-02 | 11                  |
| 1         | 2017-06-25 | 12                  |
| 3         | 2016-03-02 | 0                   |
| 3         | 2018-07-03 | 5                   |
+-----------+------------+---------------------+
对于 ID 为 1 的玩家，2016-05-02 共玩了 5+6=11 个游戏，2017-06-25 共玩了 5+6+1=12 个游戏。
对于 ID 为 3 的玩家，2018-07-03 共玩了 0+5=5 个游戏。
请注意，对于每个玩家，我们只关心玩家的登录日期。


执行用时：602 ms, 在所有 MySQL 提交中击败了74.66%的用户
内存消耗：0B, 在所有 MySQL 提交中击败了100.00%的用户
SELECT
	a1.player_id,
	a1.event_date,
	SUM(a2.games_played) `games_played_so_far`
FROM
	Activity a1
JOIN
	Activity a2
ON
	a2.player_id = a1.player_id
AND
	a2.event_date <= a1.event_date
GROUP BY
	a1.event_date,
	a1.player_id;



使用这种方法不光耗时 而且选择执行代码 如何在进行差别比较，就是不对
执行用时：3910 ms, 在所有 MySQL 提交中击败了5.02的用户
内存消耗：0B, 在所有 MySQL 提交中击败了100.00%的用户
SELECT
	a1.player_id,
	a1.event_date,
	(SELECT
		SUM(a2.games_played)
	FROM
		Activity a2
	WHERE
		a2.player_id = a1.player_id
	AND
		a2.event_date <= a1.event_date
	) `games_played_so_far`
FROM
	Activity a1
GROUP BY
	a1.event_date,
	a1.player_id;



编写一个 SQL 查询，报告在首次登录的第二天再次登录的玩家的比率，四舍五入到小数点后两位。
换句话说，您需要计算从首次登录日期开始至少连续两天登录的玩家的数量，然后除以玩家总数。
查询结果格式如下所示：
Result table:
+-----------+
| fraction  |
+-----------+
| 0.33      |
+-----------+
只有 ID 为 1 的玩家在第一天登录后才重新登录，所以答案是 1/3 = 0.33

执行用时：411 ms, 在所有 MySQL 提交中击败了71.70%的用户
内存消耗：0B, 在所有 MySQL 提交中击败了100.00%的用户
SELECT
	ROUND(COUNT(DISTINCT a1.player_id)/(
	SELECT
		COUNT(DISTINCT player_id)
	FROM
		Activity
	),2) `fraction`
FROM
	Activity a1
JOIN
	(SELECT
		player_id,
		MIN(event_date) `first_login`
	FROM
		Activity
	GROUP BY
		player_id
	) a2
ON
	a1.player_id = a2.player_id
AND
	DATEDIFF(a1.event_date,a2.first_login)=1;


来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/game-play-analysis-i
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。